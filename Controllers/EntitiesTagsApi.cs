/*
 * Agrio Example Service Api
 *
 * Agrio Example Services Documentation
 *
 * OpenAPI spec version: v1
 * Contact: admin@sophietech.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using InterviewTask.Api.Contract.Attributes;
using InterviewTask.Api.Contract.Security;
using Microsoft.AspNetCore.Authorization;
using InterviewTask.Api.Contract.Models;

namespace InterviewTask.Api.Contract.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class EntitiesTagsApiController : ControllerBase
    { 
        /// <summary>
        /// Create new Entity
        /// </summary>
        /// <remarks>Create new Entity</remarks>
        /// <param name="body">Create Entity request</param>
        /// <param name="acceptLanguage">language(s) client is able to understand, and which locale variant is preferred</param>
        /// <response code="201">Created</response>
        /// <response code="400">The specified resource was not valid</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="409">The specified resource already persisted</response>
        [HttpPost]
        [Route("/entities")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("CreateEntity")]
        [SwaggerResponse(statusCode: 201, type: typeof(EntityViewModel), description: "Created")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorViewModel), description: "The specified resource was not valid")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorViewModel), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 409, type: typeof(ErrorViewModel), description: "The specified resource already persisted")]
        public virtual IActionResult CreateEntity([FromBody]EntityCreateModel body, [FromHeader][Required()]string acceptLanguage)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(EntityViewModel));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorViewModel));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorViewModel));

            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(ErrorViewModel));
            string exampleJson = null;
            exampleJson = "{\r\n  \"relationIdField\" : 1,\r\n  \"doubleField\" : 10,\r\n  \"exampleType\" : \"type1\",\r\n  \"dictionaryField\" : \"\",\r\n  \"integerField\" : 1,\r\n  \"exampleStatus\" : true,\r\n  \"dateField\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n  \"stringField\" : \"somestring\"\r\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<EntityViewModel>(exampleJson)
                        : default(EntityViewModel);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete Entity
        /// </summary>
        /// <remarks>Delete Entity</remarks>
        /// <param name="acceptLanguage">language(s) client is able to understand, and which locale variant is preferred</param>
        /// <param name="entityId">Entity Id</param>
        /// <response code="204">No Content</response>
        /// <response code="400">The specified resource was not valid</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpDelete]
        [Route("/entities/{entityId}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeleteEntity")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorViewModel), description: "The specified resource was not valid")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorViewModel), description: "The specified resource was not found")]
        public virtual IActionResult DeleteEntity([FromHeader][Required()]string acceptLanguage, [FromRoute][Required]Guid? entityId)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorViewModel));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorViewModel));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get all Entities
        /// </summary>
        /// <remarks>Get all Entities</remarks>
        /// <param name="acceptLanguage">language(s) client is able to understand, and which locale variant is preferred</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set.</param>
        /// <param name="limit">The numbers of items to return.</param>
        /// <param name="term">Filter argument in which to retrieve the results. Basic text search on relevant fields</param>
        /// <param name="sort">Order in which to retrieve the results. Multiple sort criteria can not be passed</param>
        /// <response code="200">Success</response>
        /// <response code="400">The specified resource was not valid</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [Route("/entities")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetEntities")]
        [SwaggerResponse(statusCode: 200, type: typeof(EntityListModel), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorViewModel), description: "The specified resource was not valid")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorViewModel), description: "The specified resource was not found")]
        public virtual IActionResult GetEntities([FromHeader][Required()]string acceptLanguage, [FromQuery]int? offset, [FromQuery][Range(1, 100)]int? limit, [FromQuery]string term, [FromQuery]string sort)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EntityListModel));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorViewModel));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorViewModel));
            string exampleJson = null;
            exampleJson = "{\r\n  \"totalCount\" : 0,\r\n  \"items\" : [ {\r\n    \"relationNameField\" : \"1\",\r\n    \"integerField\" : 1,\r\n    \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n    \"stringField\" : \"somestring\"\r\n  }, {\r\n    \"relationNameField\" : \"1\",\r\n    \"integerField\" : 1,\r\n    \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n    \"stringField\" : \"somestring\"\r\n  } ]\r\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<EntityListModel>(exampleJson)
                        : default(EntityListModel);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get one Entity
        /// </summary>
        /// <remarks>Get one Entity</remarks>
        /// <param name="acceptLanguage">language(s) client is able to understand, and which locale variant is preferred</param>
        /// <param name="entityId">Entity Id</param>
        /// <response code="200">Success</response>
        /// <response code="400">The specified resource was not valid</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [Route("/entities/{entityId}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetEntity")]
        [SwaggerResponse(statusCode: 200, type: typeof(EntityViewModel), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorViewModel), description: "The specified resource was not valid")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorViewModel), description: "The specified resource was not found")]
        public virtual IActionResult GetEntity([FromHeader][Required()]string acceptLanguage, [FromRoute][Required]Guid? entityId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EntityViewModel));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorViewModel));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorViewModel));
            string exampleJson = null;
            exampleJson = "{\r\n  \"relationIdField\" : 1,\r\n  \"doubleField\" : 10,\r\n  \"exampleType\" : \"type1\",\r\n  \"dictionaryField\" : \"\",\r\n  \"integerField\" : 1,\r\n  \"exampleStatus\" : true,\r\n  \"dateField\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n  \"stringField\" : \"somestring\"\r\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<EntityViewModel>(exampleJson)
                        : default(EntityViewModel);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update Entity
        /// </summary>
        /// <remarks>Update Entity</remarks>
        /// <param name="body">Entity request for update</param>
        /// <param name="acceptLanguage">language(s) client is able to understand, and which locale variant is preferred</param>
        /// <param name="entityId">Entity Id</param>
        /// <response code="204">No Content</response>
        /// <response code="400">The specified resource was not valid</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpPatch]
        [Route("/entities/{entityId}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdateEntity")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorViewModel), description: "The specified resource was not valid")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorViewModel), description: "The specified resource was not found")]
        public virtual IActionResult UpdateEntity([FromBody]EntityUpdateModel body, [FromHeader][Required()]string acceptLanguage, [FromRoute][Required]Guid? entityId)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorViewModel));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorViewModel));

            throw new NotImplementedException();
        }
    }
}
