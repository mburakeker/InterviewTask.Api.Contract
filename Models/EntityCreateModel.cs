/*
 * Agrio Example Service Api
 *
 * Agrio Example Services Documentation
 *
 * OpenAPI spec version: v1
 * Contact: admin@sophietech.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace InterviewTask.Api.Contract.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EntityCreateModel : IEquatable<EntityCreateModel>
    { 
        /// <summary>
        /// Gets or Sets StringField
        /// </summary>
        [DataMember(Name="stringField")]
        public string StringField { get; set; }

        /// <summary>
        /// Gets or Sets RelationIdField
        /// </summary>
        [DataMember(Name="relationIdField")]
        public int? RelationIdField { get; set; }

        /// <summary>
        /// Gets or Sets DictionaryField
        /// </summary>
        [DataMember(Name="dictionaryField")]
        public AllOfEntityCreateModelDictionaryField DictionaryField { get; set; }

        /// <summary>
        /// Gets or Sets IntegerField
        /// </summary>
        [DataMember(Name="integerField")]
        public int? IntegerField { get; set; }

        /// <summary>
        /// Gets or Sets DoubleField
        /// </summary>
        [DataMember(Name="doubleField")]
        public double? DoubleField { get; set; }

        /// <summary>
        /// Gets or Sets DateField
        /// </summary>
        [DataMember(Name="dateField")]
        public DateTime? DateField { get; set; }

        /// <summary>
        /// Gets or Sets ExampleType
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ExampleTypeEnum
        {
            /// <summary>
            /// Enum Type1Enum for type1
            /// </summary>
            [EnumMember(Value = "type1")]
            Type1Enum = 0,
            /// <summary>
            /// Enum Type2Enum for type2
            /// </summary>
            [EnumMember(Value = "type2")]
            Type2Enum = 1,
            /// <summary>
            /// Enum Type3Enum for type3
            /// </summary>
            [EnumMember(Value = "type3")]
            Type3Enum = 2,
            /// <summary>
            /// Enum Type4Enum for type4
            /// </summary>
            [EnumMember(Value = "type4")]
            Type4Enum = 3        }

        /// <summary>
        /// Gets or Sets ExampleType
        /// </summary>
        [DataMember(Name="exampleType")]
        public ExampleTypeEnum? ExampleType { get; set; }

        /// <summary>
        /// Gets or Sets ExampleStatus
        /// </summary>
        [DataMember(Name="exampleStatus")]
        public bool? ExampleStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EntityCreateModel {\n");
            sb.Append("  StringField: ").Append(StringField).Append("\n");
            sb.Append("  RelationIdField: ").Append(RelationIdField).Append("\n");
            sb.Append("  DictionaryField: ").Append(DictionaryField).Append("\n");
            sb.Append("  IntegerField: ").Append(IntegerField).Append("\n");
            sb.Append("  DoubleField: ").Append(DoubleField).Append("\n");
            sb.Append("  DateField: ").Append(DateField).Append("\n");
            sb.Append("  ExampleType: ").Append(ExampleType).Append("\n");
            sb.Append("  ExampleStatus: ").Append(ExampleStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EntityCreateModel)obj);
        }

        /// <summary>
        /// Returns true if EntityCreateModel instances are equal
        /// </summary>
        /// <param name="other">Instance of EntityCreateModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EntityCreateModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    StringField == other.StringField ||
                    StringField != null &&
                    StringField.Equals(other.StringField)
                ) && 
                (
                    RelationIdField == other.RelationIdField ||
                    RelationIdField != null &&
                    RelationIdField.Equals(other.RelationIdField)
                ) && 
                (
                    DictionaryField == other.DictionaryField ||
                    DictionaryField != null &&
                    DictionaryField.Equals(other.DictionaryField)
                ) && 
                (
                    IntegerField == other.IntegerField ||
                    IntegerField != null &&
                    IntegerField.Equals(other.IntegerField)
                ) && 
                (
                    DoubleField == other.DoubleField ||
                    DoubleField != null &&
                    DoubleField.Equals(other.DoubleField)
                ) && 
                (
                    DateField == other.DateField ||
                    DateField != null &&
                    DateField.Equals(other.DateField)
                ) && 
                (
                    ExampleType == other.ExampleType ||
                    ExampleType != null &&
                    ExampleType.Equals(other.ExampleType)
                ) && 
                (
                    ExampleStatus == other.ExampleStatus ||
                    ExampleStatus != null &&
                    ExampleStatus.Equals(other.ExampleStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (StringField != null)
                    hashCode = hashCode * 59 + StringField.GetHashCode();
                    if (RelationIdField != null)
                    hashCode = hashCode * 59 + RelationIdField.GetHashCode();
                    if (DictionaryField != null)
                    hashCode = hashCode * 59 + DictionaryField.GetHashCode();
                    if (IntegerField != null)
                    hashCode = hashCode * 59 + IntegerField.GetHashCode();
                    if (DoubleField != null)
                    hashCode = hashCode * 59 + DoubleField.GetHashCode();
                    if (DateField != null)
                    hashCode = hashCode * 59 + DateField.GetHashCode();
                    if (ExampleType != null)
                    hashCode = hashCode * 59 + ExampleType.GetHashCode();
                    if (ExampleStatus != null)
                    hashCode = hashCode * 59 + ExampleStatus.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EntityCreateModel left, EntityCreateModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EntityCreateModel left, EntityCreateModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
